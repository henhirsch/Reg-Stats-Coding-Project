cum_sig_long$president <- as.factor(cum_sig_long$president)
# set pres colors
cum_sig_long <- cum_sig_long %>%
mutate(pres_colors = case_when(
president == "Reagan" ~ "#C9102F",
president == "Bush_41" ~ "#008364",
president == "Clinton" ~ "#033C5A",
president == "Bush_43" ~ "#AA9868",
president == "Obama" ~ "#0190DB",
president == "Trump" ~ "#FFC72C",
president == "Biden" ~ "#78BE20",
TRUE ~ "Other"
))
# Cumulative Economically Significant Final Rules by Administration
# clean environment
rm(list = ls())
# Cumulative Economically Significant Final Rules by Administration
# clean environment
rm(list = ls())
# load packages
library(ggplot2)
library(tidyr)
library(dplyr)
library(ggrepel)
library(png)
# Cumulative Economically Significant Final Rules by Administration
# clean environment
rm(list = ls())
# load packages
library(ggplot2)
library(tidyr)
library(dplyr)
library(ggrepel)
library(png)
# Cumulative Economically Significant Final Rules by Administration
# clean environment
rm(list = ls())
# load packages
library(ggplot2)
library(tidyr)
library(dplyr)
library(ggrepel)
library(png)
# load data
cum_sig <- read.csv("/Users/henryhirsch/Henry/Work/2023/Regulatory Studies Center/projects/project 2 (regstats graphs)/cum_sig_rules/Cumulative_ES_rules_published_months_in_office_071023.csv", skip = 1)
#read logo
get_png <- function(filename) {
grid::rasterGrob(png::readPNG(filename),interpolate = TRUE)
}
l <- get_png("/Users/henryhirsch/Henry/Git/Reg-Stats-Coding-Project/code/RSC_logo.png")
# Create president_names list which can be updated at the top of the code and then referenced later in the code as needed?
# rename columns (will need to manually update with the names of new presidents)
colnames(cum_sig) <- c("month", "months_in_office", "Reagan", "Bush_41", "Clinton", "Bush_43", "Obama", "Trump", "Biden")
# get rid of unnecessary columns (will also need to manually update with new president names here)
cum_sig <- cum_sig[ , c("months_in_office", "Reagan", "Bush_41", "Clinton", "Bush_43", "Obama", "Trump", "Biden")]
# get rid of unnecessary rows (this would need to be altered if a president served more than two terms)
cum_sig <- cum_sig[-c(98:101), ]
# create long data frame (will also need to manually add new president's names here)
cum_sig_long_NA <- pivot_longer(cum_sig, cols = c("Reagan", "Bush_41", "Clinton", "Bush_43", "Obama", "Trump", "Biden"), names_to = "president", values_to = "econ_rules")
# remove NA values from long data frame (these NA values are the potential econ_rules values for presidents who didn't/haven't yet served the maximum number of months)
cum_sig_long <- cum_sig_long_NA[complete.cases(cum_sig_long_NA), ]
# change president column to factor
cum_sig_long$president <- as.factor(cum_sig_long$president)
# set pres colors
cum_sig_long <- cum_sig_long %>%
mutate(pres_colors = case_when(
president == "Reagan" ~ "#C9102F",
president == "Bush_41" ~ "#008364",
president == "Clinton" ~ "#033C5A",
president == "Bush_43" ~ "#AA9868",
president == "Obama" ~ "#0190DB",
president == "Trump" ~ "#FFC72C",
president == "Biden" ~ "#78BE20",
TRUE ~ "Other"
))
# Cumulative Economically Significant Final Rules by Administration
# clean environment
rm(list = ls())
# Cumulative Economically Significant Final Rules by Administration
# clean environment
rm(list = ls())
# load packages
library(ggplot2)
library(tidyr)
library(dplyr)
library(ggrepel)
library(png)
# load data
cum_sig <- read.csv("/Users/henryhirsch/Henry/Work/2023/Regulatory Studies Center/projects/project 2 (regstats graphs)/cum_sig_rules/Cumulative_ES_rules_published_months_in_office_071023.csv", skip = 1)
#read logo
get_png <- function(filename) {
grid::rasterGrob(png::readPNG(filename),interpolate = TRUE)
}
l <- get_png("/Users/henryhirsch/Henry/Git/Reg-Stats-Coding-Project/code/RSC_logo.png")
# Create president_names list which can be updated at the top of the code and then referenced later in the code as needed?
# rename columns (will need to manually update with the names of new presidents)
colnames(cum_sig) <- c("month", "months_in_office", "Reagan", "Bush_41", "Clinton", "Bush_43", "Obama", "Trump", "Biden")
# get rid of unnecessary columns (will also need to manually update with new president names here)
cum_sig <- cum_sig[ , c("months_in_office", "Reagan", "Bush_41", "Clinton", "Bush_43", "Obama", "Trump", "Biden")]
# get rid of unnecessary rows (this would need to be altered if a president served more than two terms)
cum_sig <- cum_sig[-c(98:101), ]
# create long data frame (will also need to manually add new president's names here)
cum_sig_long_NA <- pivot_longer(cum_sig, cols = c("Reagan", "Bush_41", "Clinton", "Bush_43", "Obama", "Trump", "Biden"), names_to = "president", values_to = "econ_rules")
# remove NA values from long data frame (these NA values are the potential econ_rules values for presidents who didn't/haven't yet served the maximum number of months)
cum_sig_long <- cum_sig_long_NA[complete.cases(cum_sig_long_NA), ]
# change president column to factor
cum_sig_long$president <- as.factor(cum_sig_long$president)
# set pres colors
cum_sig_long <- cum_sig_long %>%
mutate(pres_colors = case_when(
president == "Reagan" ~ "#C9102F",
president == "Bush_41" ~ "#008364",
president == "Clinton" ~ "#033C5A",
president == "Bush_43" ~ "#AA9868",
president == "Obama" ~ "#0190DB",
president == "Trump" ~ "#FFC72C",
president == "Biden" ~ "#78BE20",
TRUE ~ "Other"
))
View(l)
View(l)
View(cum_sig)
View(cum_sig_long_NA)
View(get_png)
View(cum_sig_long_NA)
View(cum_sig_long)
str(cum_sig_long)
# Cumulative Economically Significant Final Rules by Administration
# clean environment
rm(list = ls())
# load packages
library(ggplot2)
library(tidyr)
library(dplyr)
library(ggrepel)
library(png)
# load data
cum_sig <- read.csv("/Users/henryhirsch/Henry/Work/2023/Regulatory Studies Center/projects/project 2 (regstats graphs)/cum_sig_rules/Cumulative_ES_rules_published_months_in_office_071023.csv", skip = 1)
#read logo
get_png <- function(filename) {
grid::rasterGrob(png::readPNG(filename),interpolate = TRUE)
}
l <- get_png("/Users/henryhirsch/Henry/Git/Reg-Stats-Coding-Project/code/RSC_logo.png")
# Create president_names list which can be updated at the top of the code and then referenced later in the code as needed?
# rename columns (will need to manually update with the names of new presidents)
colnames(cum_sig) <- c("month", "months_in_office", "Reagan", "Bush_41", "Clinton", "Bush_43", "Obama", "Trump", "Biden")
# get rid of unnecessary columns (will also need to manually update with new president names here)
cum_sig <- cum_sig[ , c("months_in_office", "Reagan", "Bush_41", "Clinton", "Bush_43", "Obama", "Trump", "Biden")]
# get rid of unnecessary rows (this would need to be altered if a president served more than two terms)
cum_sig <- cum_sig[-c(98:101), ]
# create long data frame (will also need to manually add new president's names here)
cum_sig_long_NA <- pivot_longer(cum_sig, cols = c("Reagan", "Bush_41", "Clinton", "Bush_43", "Obama", "Trump", "Biden"), names_to = "president", values_to = "econ_rules")
# remove NA values from long data frame (these NA values are the potential econ_rules values for presidents who didn't/haven't yet served the maximum number of months)
cum_sig_long <- cum_sig_long_NA[complete.cases(cum_sig_long_NA), ]
# change president column to factor
cum_sig_long$president <- as.factor(cum_sig_long$president)
# set pres colors
cum_sig_long <- cum_sig_long %>%
mutate(pres_color = case_when(
president == "Reagan" ~ "#C9102F",
president == "Bush_41" ~ "#008364",
president == "Clinton" ~ "#033C5A",
president == "Bush_43" ~ "#AA9868",
president == "Obama" ~ "#0190DB",
president == "Trump" ~ "#FFC72C",
president == "Biden" ~ "#78BE20",
TRUE ~ "Other"
))
# set pres labels
cum_sig_long <- cum_sig_long %>%
mutate(pres_label = case_when(
president == "Reagan" ~ "Reagan",
president == "Bush_41" ~ "Bush 41",
president == "Clinton" ~ "Clinton",
president == "Bush_43" ~ "Bush 43",
president == "Obama" ~ "Obama",
president == "Trump" ~ "Trump",
president == "Biden" ~ "Biden",
TRUE ~ "Other"
))
str(cum_sig_long)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
View(line_ends)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
# Cumulative Economically Significant Final Rules by Administration
# clean environment
rm(list = ls())
# load packages
library(ggplot2)
library(tidyr)
library(dplyr)
library(ggrepel)
library(png)
# load data
cum_sig <- read.csv("/Users/henryhirsch/Henry/Work/2023/Regulatory Studies Center/projects/project 2 (regstats graphs)/cum_sig_rules/Cumulative_ES_rules_published_months_in_office_071023.csv", skip = 1)
#read logo
get_png <- function(filename) {
grid::rasterGrob(png::readPNG(filename),interpolate = TRUE)
}
l <- get_png("/Users/henryhirsch/Henry/Git/Reg-Stats-Coding-Project/code/RSC_logo.png")
# Create president_names list which can be updated at the top of the code and then referenced later in the code as needed?
# rename columns (will need to manually update with the names of new presidents)
colnames(cum_sig) <- c("month", "months_in_office", "Reagan", "Bush_41", "Clinton", "Bush_43", "Obama", "Trump", "Biden")
# get rid of unnecessary columns (will also need to manually update with new president names here)
cum_sig <- cum_sig[ , c("months_in_office", "Reagan", "Bush_41", "Clinton", "Bush_43", "Obama", "Trump", "Biden")]
# get rid of unnecessary rows (this would need to be altered if a president served more than two terms)
cum_sig <- cum_sig[-c(98:101), ]
# create long data frame (will also need to manually add new president's names here)
cum_sig_long_NA <- pivot_longer(cum_sig, cols = c("Reagan", "Bush_41", "Clinton", "Bush_43", "Obama", "Trump", "Biden"), names_to = "president", values_to = "econ_rules")
# remove NA values from long data frame (these NA values are the potential econ_rules values for presidents who didn't/haven't yet served the maximum number of months)
cum_sig_long <- cum_sig_long_NA[complete.cases(cum_sig_long_NA), ]
# change president column to factor
cum_sig_long$president <- as.factor(cum_sig_long$president)
# set pres colors
cum_sig_long <- cum_sig_long %>%
mutate(pres_color = case_when(
president == "Reagan" ~ "#C9102F",
president == "Bush_41" ~ "#008364",
president == "Clinton" ~ "#033C5A",
president == "Bush_43" ~ "#AA9868",
president == "Obama" ~ "#0190DB",
president == "Trump" ~ "#FFC72C",
president == "Biden" ~ "#78BE20",
TRUE ~ "Other"
))
# set pres labels
cum_sig_long <- cum_sig_long %>%
mutate(pres_label = case_when(
president == "Reagan" ~ "Reagan",
president == "Bush_41" ~ "Bush 41",
president == "Clinton" ~ "Clinton",
president == "Bush_43" ~ "Bush 43",
president == "Obama" ~ "Obama",
president == "Trump" ~ "Trump",
president == "Biden" ~ "Biden",
TRUE ~ "Other"
))
# set pres colors
# pres_colors <- c("Reagan" = "#C9102F", "Bush_41" = "#008364","Clinton" = "#033C5A", "Bush_43" = "#AA9868", "Obama" = "#0190DB", "Trump" = "#FFC72C", "Biden" = "#78BE20")
# set pres annotations
# pres_annotations <- data.frame(
#   president = c("Reagan", "Bush_41", "Clinton", "Bush_43", "Obama", "Trump", "Biden"),
#   labels = c("Reagan", "Bush 41", "Clinton", "Bush 43", "Obama", "Trump", "Biden")
# )
# match the colors directly
# pres_annotations$name_color <- pres_colors[pres_annotations$president]
# calculate the end points of the lines
line_ends <- cum_sig_long %>%
group_by(president) %>%
summarise(months_in_office = max(months_in_office), econ_rules = max(econ_rules))
# join the line end points with the cum_sig_long data frame
pres_annotations <- merge(cum_sig_long, line_ends, by = "president")
View(pres_annotations)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
View(line_ends)
View(cum_sig_long)
# Cumulative Economically Significant Final Rules by Administration
# clean environment
rm(list = ls())
# load packages
library(ggplot2)
library(tidyr)
library(dplyr)
library(ggrepel)
library(png)
# load data
cum_sig <- read.csv("/Users/henryhirsch/Henry/Work/2023/Regulatory Studies Center/projects/project 2 (regstats graphs)/cum_sig_rules/Cumulative_ES_rules_published_months_in_office_071023.csv", skip = 1)
#read logo
get_png <- function(filename) {
grid::rasterGrob(png::readPNG(filename),interpolate = TRUE)
}
l <- get_png("/Users/henryhirsch/Henry/Git/Reg-Stats-Coding-Project/code/RSC_logo.png")
# Create president_names list which can be updated at the top of the code and then referenced later in the code as needed?
# rename columns (will need to manually update with the names of new presidents)
colnames(cum_sig) <- c("month", "months_in_office", "Reagan", "Bush_41", "Clinton", "Bush_43", "Obama", "Trump", "Biden")
# get rid of unnecessary columns (will also need to manually update with new president names here)
cum_sig <- cum_sig[ , c("months_in_office", "Reagan", "Bush_41", "Clinton", "Bush_43", "Obama", "Trump", "Biden")]
# get rid of unnecessary rows (this would need to be altered if a president served more than two terms)
cum_sig <- cum_sig[-c(98:101), ]
# create long data frame (will also need to manually add new president's names here)
cum_sig_long_NA <- pivot_longer(cum_sig, cols = c("Reagan", "Bush_41", "Clinton", "Bush_43", "Obama", "Trump", "Biden"), names_to = "president", values_to = "econ_rules")
# remove NA values from long data frame (these NA values are the potential econ_rules values for presidents who didn't/haven't yet served the maximum number of months)
cum_sig_long <- cum_sig_long_NA[complete.cases(cum_sig_long_NA), ]
# change president column to factor (assign levels and labels)
cum_sig_long <- cum_sig_long %>%
mutate(president = factor(president,
levels = c("Reagan",
"Bush_41",
"Clinton",
"Bush_43",
"Obama",
"Trump",
"Biden"),
labels = c("Reagan",
"Bush 41",
"Clinton",
"Bush 43",
"Obama",
"Trump",
"Biden")))
View(cum_sig_long)
str(cum_sig_long)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
View(line_ends)
str(line_ends)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
View(line_ends)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
# clean environment
rm(list = ls())
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
View(cum_sig_long)
View(line_ends)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
# clean environment
rm(list=ls())
# load packages
library(ggplot2)
library(ggplot2)
library(png)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
View(rules_pub)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
View(rules_pub)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
View(rules_pub)
str(rules_pub)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
View(rules_pub_NA)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
View(rules_pub_NA)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
View(rules_pub)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/econ_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
str(rules_pub)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
View(cum_sig_long_NA)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
View(rules_pub)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
str(rules_poub)
str(rules_pub)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
str(rules_poub)
str(rules_pub)
str(rules_pub)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
View(rules_pub)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
View(line1)
View(rules_pub)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
View(rules_pub_NA)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
View(rules_pub_NA)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
View(rules_pub_long_NA)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
View(rules_pub)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
View(rules_pub_long)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_published_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
View(rules_pub_long)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
str(rules_pub_long)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
str(cum_sig_long)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
str(rules_pub_long)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
View(rules_pub_long)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/cum_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/econ_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/sig_fin_rules_pub_by_pres_year.R", echo=TRUE)
View(sig_fin_rules)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/sig_fin_rules_pub_by_pres_year.R", echo=TRUE)
View(sig_fin_rules_NA)
View(sig_fin_rules_NA)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/sig_fin_rules_pub_by_pres_year.R", echo=TRUE)
View(sig_fin_rules_NA)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/sig_fin_rules_pub_by_pres_year.R", echo=TRUE)
View(sig_fin_rules)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/sig_fin_rules_pub_by_pres_year.R", echo=TRUE)
View(sig_fin_rules)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/sig_fin_rules_pub_by_pres_year.R", echo=TRUE)
View(sig_fin_rules)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/sig_fin_rules_pub_by_pres_year.R", echo=TRUE)
View(sig_fin_rules)
str(sig_fin_rules)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/sig_fin_rules_pub_by_pres_year.R", echo=TRUE)
str(sig_fin_rules)
str(sig_final_rules)
str(sig_fin_rules)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/sig_fin_rules_pub_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/sig_fin_rules_pub_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/sig_fin_rules_pub_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/sig_fin_rules_pub_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/sig_fin_rules_pub_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/econ_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/sig_fin_rules_pub_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/econ_sig_rules.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
source("~/Henry/Git/Reg-Stats-Coding-Project/code/rules_pub_in_FR_by_pres_year.R", echo=TRUE)
